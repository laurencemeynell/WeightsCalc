#BlueJ class context
comment0.params=
comment0.target=WeightsCalc()
comment0.text=\r\n\ Zero\ argument\ constructor\ for\ objects\ of\ class\ WeightsCalc\r\n\ Initalises\ bar\ weight\ to\ 0.0\ and\ creates\ an\ empty\ SortedMap\ of\ available\ weights\r\n
comment1.params=aBar\ anAvailableWeights
comment1.target=WeightsCalc(double,\ java.util.SortedMap)
comment1.text=\r\n\ Two\ argument\ contructor\ for\ objects\ of\ class\ WeightsCalc\r\n\ @param\ aBar\ the\ weight\ of\ your\ bar\r\n\ @param\ anAvailableWeights\ a\ SortedMap\ containing\ all\ your\ available\ weights\r\n\ The\ key\ of\ your\ SortedMap\ should\ be\ the\ weight\ of\ your\ available\ plates\r\n\ The\ value\ should\ be\ the\ number\ of\ those\ plates\ that\ you\ have\r\n
comment10.params=
comment10.target=void\ runCalc()
comment10.text=\r\n\ runCalc\ asks\ the\ user\ to\ input\ their\ bar\ weight\ and\ available\ weights\r\n\ Then\ it\ will\ asks\ the\ user\ to\ input\ a\ target\ weight\ and\ display\ how\ to\r\n\ load\ the\ side\ of\ a\ barbell\ to\ achieve\ this\ target\ weight\ repeatedly\r\n\ until\ the\ user\ enters\ an\ empty\ String\ for\ a\ target\ weight.\r\n\ Performs\ no\ error\ checking\ so\ any\ input\ which\ can't\ be\ parsed\ will\ \r\n\ cause\ the\ program\ to\ crash\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ toString\ returns\ the\ weight\ of\ the\ bar\ followed\ by\ the\ weight\ and\ number\r\n\ of\ each\ set\ of\ plates\ in\ descending\ order\r\n\ @return\ the\ weight\ of\ the\ bar\ and\ number\ and\ weight\ of\ the\ plates\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ main\ method\ runs\ the\ WeightsCalc\ program\ in\ the\ command\ line\r\n
comment2.params=
comment2.target=double\ getBarWeight()
comment2.text=\r\n\ getBarWeight\ returns\ the\ weight\ of\ the\ bar\r\n\ @return\ the\ weight\ of\ the\ bar\r\n
comment3.params=
comment3.target=java.util.SortedMap\ getAvailableWeights()
comment3.text=\r\n\ getAvailableWeights\ returns\ a\ SortedMap\ of\ all\ the\ available\ weights\r\n\ @return\ all\ the\ available\ weights\ as\ a\ SortedMap\r\n\ The\ key\ is\ the\ weight\ of\ your\ available\ plates\r\n\ The\ value\ is\ the\ number\ of\ those\ plates\ that\ you\ have\r\n
comment4.params=
comment4.target=java.util.SortedMap\ getTargetWeights()
comment4.text=\r\n\ getTargetWeights\ returns\ a\ SortedMap\ of\ weights\ that\ match\ a\ weight\ target\r\n\ @return\ the\ weights\ that\ match\ your\ target\ weight\ as\ a\ SortedMap\r\n\ The\ key\ is\ the\ weight\ of\ your\ targetted\ plates\r\n\ The\ value\ is\ the\ number\ of\ those\ plates\r\n
comment5.params=aBarWeight
comment5.target=void\ setBarWeight(double)
comment5.text=\r\n\ Sets\ the\ weight\ of\ the\ bar\ to\ the\ parameter\r\n\ @param\ the\ weight\ of\ the\ bar\ to\ be\ set\r\n
comment6.params=anAvailableWeights
comment6.target=void\ setAvailableWeights(java.util.SortedMap)
comment6.text=\r\n\ Sets\ the\ available\ weights\ to\ the\ parameter\r\n\ @param\ a\ SortedMap\ of\ the\ available\ weights\r\n\ The\ key\ of\ your\ SortedMap\ should\ be\ the\ weight\ of\ your\ available\ plates\r\n\ The\ value\ should\ be\ the\ number\ of\ those\ plates\ that\ you\ have\r\n
comment7.params=
comment7.target=java.lang.String\ userInput()
comment7.text=\r\n\ userInput\ gets\ input\ from\ the\ user\ from\ the\ command\ line\r\n\ It\ returns\ this\ input\ as\ a\ String\r\n\ @return\ String\ whatever\ the\ user\ just\ inputted\r\n
comment8.params=
comment8.target=void\ inputWeights()
comment8.text=\r\n\ Asks\ the\ user\ to\ input\ the\ weight\ of\ their\ bar\ and\ the\ weight\r\n\ and\ number\ of\ any\ weight\ plates\ they\ have\ avilable.\ \ Will\ keep\r\n\ asking\ for\ new\ weights\ until\ the\ user\ presses\ enter.\ \ Does\r\n\ not\ do\ any\ error\ checking\ so\ input\ that\ can't\ be\ parsed\ will\r\n\ cause\ the\ program\ to\ crash\r\n
comment9.params=aTarget
comment9.target=java.util.SortedMap\ calculateWeights(java.lang.Double)
comment9.text=\r\n\ Returns\ an\ arrangement\ of\ available\ weights\ that\ will\ match\ the\ \r\n\ target\ weight.\ \ If\ the\ target\ weight\ is\ impossible\ to\ achieve\ with\ \r\n\ the\ available\ weights\ it\ will\ warn\ the\ user\ then\ display\ the\ nearest\ \r\n\ achieveable\ weight.\ \ Keeps\ asking\ for\ target\ weights\ until\ the\ user\ \r\n\ presses\ enter.\r\n\ @param\ aTarget\ the\ target\ weight\ you\ want\ to\ achieve\r\n\ @return\ the\ weights\ that\ will\ achieve\ your\ target\ weight\r\n
numComments=13
